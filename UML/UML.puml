@startuml

'https://plantuml.com/class-diagram
'- Privado' 'private Jugador jugador'
'# protected' 'protected Jugador jugador'
'~ package' 'Jugador jugador'
'+ public' 'public Jugador jugador'

package "Mapas" {
    class SalaCartasMapa {
        + mapaCartas: Character[][]
        + posXInicial: int
        + posYInicial: int
        + posXEntrada: int
        + posYEntrada: int
        + posXCartaMas: int
        + posYCartaMas: int
    }

    class SalaJuegosAzarMapa {
        + mapaAzar: Character[][]
        + posXInicial: int
        + posYInicial: int
        + posXEntrada: int
        + posYEntrada: int
        + posXRuleta: int
        + posYRuleta: int
        + posXSlots: int
        + posYSlots: int
        + posXBingo: int
        + posYBingo: int
        + posXDados: int
        + posYDados: int
    }

    class SalaPrincipalMapa {
        + mapaSalaPrincipal: Character[][]
        + posXInicial: int
        + posYInicial: int
    }
}

package "Patterns/Observer" {
    interface PullPushModelObservable {
        + attach(PullPushModelObserver): void
        + detach(PullPushModelObserver): void
        + detachAll(): void
        + notifyObservers(): void
    }

    interface PullPushModelObserver {
        + update(PullPushModelObservable, Object): void
    }

    interface PullPushModelObserverInteractive {
        + interactive(): void
    }

    abstract class Subscription {
        + {abstract} subscribe(Jugador): void
        + {abstract} unsubscribe(Jugador): void
    }
}

package "personas" {
    class Jugador {
        - {static} serialVersionUID: long
        - posX: Integer
        - posY: Integer
        - interact: Boolean
        - items: List<Items>
        - inventario: Boolean
        - nombre: String
        - edad: Integer
        - dinero: Double
        - fichas: Integer
        - salaActual: Sala
        - observers: List<PullPushModelObserver>

        + Jugador(String, Integer, Double, Integer, Integer)
        + attach(PullPushModelObserver): void
        + detach(PullPushModelObserver): void
        + detachAll(): void
        + notifyObservers(): void
        + move(Integer, Integer): void
        + interacting(): void
        + getPosX(): Integer
        + getPosY(): Integer
        + getInteract(): Boolean
        + getName(): String
        + setNombre(String): void
        + getEdad(): Integer
        + setEdad(Integer): void
        + getDinero(): Double
        + setDinero(Double): void
        + getFichas(): Integer
        + setFichas(Integer): void
        + getSalaActual(): Sala
        + setSala(Sala): void
        + getInventario(): Boolean
        + setInventario(Boolean): void
        + agregarFichas(Integer): void
        + restarFichas(Integer): void
        + agregarDinero(Double): void
        + restarDinero(Double): void
        + agregarItem(Items): void
        + mostrarInventario(): void
        + usarItems(): void
    }

    class JugadorFactory {
        + {static} crearJugador(String, String, int, double): Jugador
    }

    class JugadorNPC {
        + JugadorNPC(String, int, double)
        + datosUsuarioEnPartida(): void
    }

    class JugadorPrincipal {
        + JugadorPrincipal(String, int, double)
        + datosUsuarioEnPartida(): void
    }
}

package "recursos" {
    class Baraja {
        - cartas: Carta[]
        - cartasDisponibles: Integer

        + Baraja()
        + mezclar(): void
        + repartir(): Carta
        + cartasRestantes(): int
        + reiniciar(): void
    }

    class Carta {
        - valor : String
        - tipo : String

        + Carta(String, String)
        + getNumero(): String
        + getTipo(): String
        + getValorNumerico(): Integer
        + getPrioridadPalo(): Integer
        + getNombreArchivo(): String
        + toString(): String
    }

    enum Games {
        - identifier: String
        + SLOTS: Games
        + RULETA: Games
        + BINGO: Games
        + DADOS: Games
        + CARTAMASALTA: Games

        - Games(String)
        + getIdentifier(): String
    }

    class MensajesEstaticos {
        + {static} playerUI(Jugador): void
        + {static} instructions(): void
        + {static} interactSave(): void
        + {static} interactATM(): void
        + {static} interactTable(String): void
        + {static} badCommand(): void
        + {static} interactFenrir(): void
    }
}

package "salas" {
    class Casino {
        + {static} iniciarCasino(): void
    }

    abstract class Sala {

        - serialVersionUID: long
        - mapa: Character[][]
        - jugador: Jugador
        # mesas: ArrayList<Mesa>
        # pasillos: ArrayList<Pasillo>
        - posInitialX: Integer
        - posInitialY: Integer

        # Sala(Jugador, Character[][])
        # Sala(Jugador, Character[][], ArrayList<Mesa>, ArrayList<Pasillo>)
        # Sala(Jugador, Character[][], ArrayList<Mesa>, ArrayList<Pasillo>, Integer, Integer)
        # interfazPrincipal(Jugador): void
        # moverJugador(int, int): void
        - mostrarMapa(): void
        # entradaTerminal(Scanner): void
        + iniciarInterfaz(): void
        + setJugador(Jugador): void
        + getPosInitialX(): Integer
        + getPosInitialY(): Integer
        + getPasillos(): ArrayList<Pasillo>
    }

    class SalaAzar {
        - {static} instancia : SalaAzar

        - SalaAzar(Jugador)
        + {static} getInstance(): SalaAzar
        + subscribe(Jugador): void → Subscription
        + unsubscribe(Jugador): void → Subscription
        + toString(): String → Object
    }

    class SalaCartas {
        - {static} instancia : SalaCartas

        - SalaCartas(Jugador)
        + {static} getInstance(): SalaCartas
        + subscribe(Jugador): void → Subscription
        + unsubscribe(Jugador): void → Subscription
        + toString(): String → Object
    }

    class SalaPrincipal {
        - {static} instancia: SalaPrincipal
        - cajero: Cajero
        - puertaSalida: PuertaSalida
        - fenrir: Fenrir

        - SalaPrincipal(Jugador)
        + {static} getInstance(Jugador): SalaPrincipal
        + {static} getInstance(): SalaPrincipal
        + subscribe(Jugador): void → Subscription
        + unsubscribe(Jugador): void → Subscription
        + toString(): String → Object
    }

    class SalaRegistro {
        + jugador: Jugador

        + SalaRegistro()
        + asciiArt(): void
        + informacionCasino(): void
        + iniciarJugador(): Jugador
        + cargarJugador(): Jugador
        + crearJugador(): Jugador
        + verificarMayorEdad(): Boolean
        + toString(): String → Object
    }
}

package "acciones" {
    class Cajero {
        - posX: Integer
        - posY: Integer
        - jugador: Jugador
        - interfaz: ASCIICajero
        - {static} serialVersionUID: long
        + Cajero(Integer, Integer)
        + update(PullPushModelObservable, Object): void
        + interactive(): void
        - iniciarCajero(Scanner): void
        - cambiarDineroAFichas(Scanner): void
        - cambiarFichasADinero(Scanner): void
        - definirCantidadFichas(Scanner): int
        - definirImporteDinero(Scanner): float
        - comprobarFichas(): void
        - comprobarDinero(): void
    }

    class Fenrir {
        - posX: Integer
        - posY: Integer
        - jugador: Jugador
        - bebidasDisponibles: List<Items> = new ArrayList<>()
        - interfaz: ASCIIFenrir
        - {static} serialVersionUID: long
        + Fenrir(Integer, Integer)
        + update(PullPushModelObservable, Object): void
        + interactive(): void
        + iniciarBar(Scanner): void
        - comprarBebida(Scanner): void
        - procesarCompraDinero(Items): void
    }

    class Mesa {
        - nombre: String
        - numParticipantes: Integer
        - posX: Integer
        - posY: Integer
        - jugador: Jugador
        - strategy: StrategyJuego
        - {static} serialVersionUID: long
        + Mesa(String, Integer, Integer, Integer)
        + getNumParticipantes(): Integer
        + getPosX(): Integer
        + getPosY(): Integer
        + getJugador(): Jugador
        + getStrategy(): StrategyJuego
        + setJugador(Jugador): void
        + setStrategy(StrategyJuego): void
        + putStrategy(): void
        + jugar(): void
        + interactive(): void
        + update(PullPushModelObservable, Object): void
        + toString(): String
    }

    class Pasillo {
        - posX: Integer
        - posY: Integer
        - salaSiguiente: Sala
        - {static} serialVersionUID: long
        + Pasillo(Integer, Integer, Sala)
        + update(PullPushModelObservable, Object): void
    }

    class PuertaSalida {
        - posX: Integer
        - posY: Integer
        - jugador: Jugador
        - interfaz: ASCIIPuerta
        - {static} serialVersionUID: long
        + PuertaSalida(Integer, Integer)
        + update(PullPushModelObservable, Object): void
        + interactive(): void
        - iniciarPuerta(Scanner): void
        - guardarPartida(): void
        - cargarPartida(): void
        - salir(): void
    }
}

package "ascii" {
    class ASCIIBingo {
        + titulo(): void
    }

    class ASCIICajero {
        ~ jugador: jugador
        + ASCIICajero(Jugador)
        + titulo(): void
        + opciones(): void
    }

    class ASCIICartaMasAlta {
        ~ jugador: jugador
        + ASCIICartaMasAlta(Jugador)
        + titulo(): void
        + cheatsheet(): void
        + opciones(): void
    }

    class ASCIIDados {
        ~ jugador: jugador
        + ASCIIDados(Jugador)
        + titulo(): void
        + cheatsheet(): void
        + opciones(): void
        + mostrarResultadoDados(Integer, Integer, Integer): void
    }

    class ASCIIFenrir {
        - {static} serialVersionUID: long
        + ASCIIFenrir
        + titulo(): void
        + opcionesBar(): void
        + mostrarMenuBebidas(List<Items>): void
        + carta(): void
    }

    class ASCIIGeneral {
        + {static} esperarTecla(): void
        + {static} limpiarPantalla(): void
    }

    class ASCIIPuerta {
        ~ jugador : Jugador
        - {static} serialVersionUID: long
        + ASCIIPuerta(Jugador)
        + titulo(): void
        + opciones(): void
    }

    class ASCIIRuleta {
        ~ jugador : Jugador
        + ASCIIRuleta(Jugador)
        + titulo(): void
        + interfazRuleta(): void
        + cheatsheet(): void
        + interfazPartida(): void
        + opciones(): void
    }

    class ASCIISlot {
        ~ jugador: Jugador
        + ASCIISlot(Jugador)
        + titulo(): void
        + cheatsheet(): void
        + opciones(): void
        + mostrarResultados(String, String, String): void
    }
}

package "excep" {
    class ExcepcionJugadorMenorEdad {
        + ExcepcionJugadorMenorEdad(String)
    }

    class ExcepcionJugadorNoEncontrado {
        + ExcepcionJugadorNoEncontrado(String)
    }

    class ExcepcionJugadorSinDinero {
        + ExcepcionJugadorSinDinero(String)
    }

    class ExcepcionJugadorSinFichas {
        + ExcepcionJugadorSinFichas(String)
    }
}

package "items" {
    class Bebida {
        - {static} serialVersionUID: long
        - nombre: String
        - precio: Double
        - descripcion: String
        + Bebida(String, Double, String)
        + getNombre(): String
        + getPrecio(): Double
        + getDescripcion(): String
        + usar(): void
    }

    interface Items {
        + getNombre(): String
        + getPrecio(): Double
        + getDescripcion(): String
        + usar(): void
    }
}

package "juegos" {
    class Bingo {
        + toString(): String
        - {static} FILAS: int = 4
        - {static} COLUMNAS: int = 6
        - cartones: String[][]
        - numerosDisponibles: HashSet<Integer>
        - jugadores: Jugador[]
        - bote: int
        - apuesta: int
        - jugador: Jugador
        - interfaz: ASCIIBingo
        + Bingo(Jugador)
        + iniciarPartida(): void
        - generarCartones(int): void
        - jugarBingo(int): void
        - imprimirCarton(String[][]): void
        - tacharNumero(String[][], int): void
        - esBingo(String[][]): boolean
    }

    class CartaMasAlta {
        + toString(): String
        - baraja: Baraja
        - interfaz: ASCIICartaMasAlta
        - jugador: Jugador
        - apuesta: Integer
        + CartaMasAlta(Jugador)
        + definirApuesta(Scanner): Integer
        + comprobarFichas(): void
        + iniciarPartida(): void
        - jugarRonda(Integer): void
    }

    class Dados {
        + toString(): String
        - apuesta: Integer
        - jugador: Jugador
        - interfaz: ASCIIDados
        + Dados(Jugador)
        + definirApuesta(Scanner): Integer
        + comprobarFichas(): void
        + iniciarPartida(): void
        - jugarDados(Scanner): void
        - jugarPunto(Scanner, Integer, Random): void
        - tirarDados(Random): Integer
    }

    class Ruleta {
        + toString(): String
        - apuesta: Integer
        - jugador: Jugador
        - interfaz: ASCIIRuleta
        + Ruleta(Jugador)
        - comprobarFichas(): void
        + iniciarPartida(): void
        - definirApuesta(Scanner): Integer
        - opcionesDeApuesta(Scanner): void
        - tirarRuleta(): Integer
        - apostarPorColor(Scanner): void
        - apostarParImpar(Scanner): void
        - apostarPorNumero(Scanner): void
        - apostarPorDocena(Scanner): void
        - apostarMitad(Scanner): void
        - esNumeroRojo(Scanner): boolean
    }

    class Slot {
        + toString(): String
        - apuesta: Integer
        - jugador: Jugador
        - interfaz: ASCIISlot
        + Slot(Jugador)
        - comprobarFichas(): void
        + iniciarPartida(): void
        - definirApuesta(Scanner): Integer
        - jugarSlot(): void
        - calcularPremio(String): Integer
    }

    interface StrategyJuego {
        + iniciarPartida(): void
    }
}

@enduml
